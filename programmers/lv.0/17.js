// 17번 풀이 배열 두배 만들기
function solution(numbers) {
    let answer = [];
    for (let i = 0; i < numbers.length; i++) {
        answer.push(numbers[i] * 2)
    }
    return answer;
}

console.log(solution([1, 2, 3, 4, 5]))
console.log(solution([1, 2, 100, -99, 1, 2, 3]))

/*
    다른 풀이
    1) function solution(numbers) {
    return numbers.reduce((a, b) => [...a, b * 2], []);
    }

    1. reduce 메서드 이해하기
    * reduce 메서드는 배열의 각 요소를 순회하면서 누적값을 계산합니다.
    * reduce의 두 번째 인자는 초기값을 설정합니다.
    * reduce는 두 개의 인자를 가진 콜백 함수를 받습니다:
        * 누적값 (Accumulator): 이전 콜백 호출의 결과입니다.
        * 현재값 (Current Value): 현재 배열 요소입니다.
    
    2. 함수에서 사용된 reduce의 콜백 함수
    * 콜백 함수는 (a, b) => [...a, b * 2]입니다.
        * a는 누적값을 나타내며, 초기값은 빈 배열 []입니다.
        * b는 현재 배열의 요소입니다.
        * [...a, b * 2]는 누적값 배열 a에 현재 요소 b의 두 배 값을 추가한 새로운 배열을 생성합니다.
    
    3. 함수의 실행 과정 예제
    입력값: [1, 2, 3, 4, 5]
    1. 초기값 설정: reduce는 빈 배열 []을 초기값으로 설정합니다.
    2. 첫 번째 반복:
        * 누적값 a: []
        * 현재값 b: 1
        * 결과 배열: [...a, b * 2] → [1 * 2] → [2]
        * 다음 호출을 위해 a는 [2]로 업데이트됩니다.
    3. 두 번째 반복:
        * 누적값 a: [2]
        * 현재값 b: 2
        * 결과 배열: [...a, b * 2] → [2, 2 * 2] → [2, 4]
        * 다음 호출을 위해 a는 [2, 4]로 업데이트됩니다.
    4. 세 번째 반복:
        * 누적값 a: [2, 4]
        * 현재값 b: 3
        * 결과 배열: [...a, b * 2] → [2, 4, 3 * 2] → [2, 4, 6]
        * 다음 호출을 위해 a는 [2, 4, 6]로 업데이트됩니다.
    5. 네 번째 반복:
        * 누적값 a: [2, 4, 6]
        * 현재값 b: 4
        * 결과 배열: [...a, b * 2] → [2, 4, 6, 4 * 2] → [2, 4, 6, 8]
        * 다음 호출을 위해 a는 [2, 4, 6, 8]로 업데이트됩니다.
    6. 다섯 번째 반복:
        * 누적값 a: [2, 4, 6, 8]
        * 현재값 b: 5
        * 결과 배열: [...a, b * 2] → [2, 4, 6, 8, 5 * 2] → [2, 4, 6, 8, 10]
        * 배열이 모두 순회되었습니다.
        

    ** 이 함수는 reduce를 사용하여 배열의 각 요소를 두 배로 만들어 새로운 배열을 생성합니다. 각 반복에서 누적값 배열에 현재 요소의 두 배 값을 추가하여 최종 결과를 반환합니다.

    2) const solution = (numbers) => numbers.map((number) => number * 2)
    1. map 메소드를 활용한 방법
    2. map 메소드는 주어진 배열의 각각요소에 콜백함수를 실행하여 새로운 배열을 형성한다.
    3. 예를 들어 배열 [1, 2, 3, 4, 5]의 경우 각각의 요소인 1, 2, 3, 4, 5를 순회하며 콜백 함수인 number * 2를 실행한다.
    4. 따라서 새로운 배열인 [2, 4, 6, 8, 10]이 생성된다.
*/